os.loadAPI("engine")

local gameEnded = false
local level = {
  {
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "floor",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
  },
  {
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
    "wall",
  },
}
elements = {
  player = engine.elements.sprite({
    priority = true,
    image = {{1}, {1}}, w = 1, h = 2,
    gravity = 0.5,
    x = 3, y = 16,
    move = {x = 0, y = 0},
    jumpHeight = 6,
    jumpedHeight = 0,
    timedUpdate = function(self)
      if self.x == 4 and self.y == 4 then
        gameEnded = true
      end
      local tile = elements.tilemap:getTile(self.x, self.y+2)
      if tile and tile.solid then
        self.jumpedHeight = 0
      end
      local jumped
      if engine.keyboard.up or engine.keyboard.w then
        self.jumpedHeight = self.jumpedHeight + 1
        if self.jumpedHeight<self.jumpHeight then
          jumped = true
          if not self:moveTo(elements.tilemap, 0, -1) then
            self.jumpedHeight = self.jumpHeight
          end
        end
      else
        self.jumpedHeight = self.jumpHeight
      end
      self.jumpHeight = 6
      if engine.keyboard.down or engine.keyboard.s then
        self.image[1][1] = nil
        self.jumpHeight = 3
      elseif not elements.tilemap:getTile(self.x, self.y).solid then
        self.image[1][1] = 1
      end
      if not jumped then
        self:moveTo(elements.tilemap, 0, 1)
      end
      if engine.keyboard.left or engine.keyboard.a then self:moveTo(elements.tilemap, -1, 0) end
      if engine.keyboard.right or engine.keyboard.d then self:moveTo(elements.tilemap, 1, 0) end
    end
  }),
  tilemap = engine.elements.tilemap({
    tileset = {
      wall = {bc=colors.gray,tc=colors.lightGray,char=" ",solid=true},
      floor = {bc=colors.lightGray,tc=colors.gray,char="·"}
    },
    generate = function(self)
      self:loadTilemap(level)
    end,
    update = function(self)
      if engine.mouse.isDown then
        if engine.mouse.button == "left" then
          self:setTile(engine.mouse.x, engine.mouse.y, "wall")
        else
          self:setTile(engine.mouse.x, engine.mouse.y, "floor")
        end
      end
      if engine.keyboard.k then
        self:saveTilemap("mapsave")
      elseif engine.keyboard.l then
        self:loadTilemap("mapsave")
      end
      if engine.keyboard.c then
        self:setRectangle(1, 1, engine.width, engine.height, "wall")
        self:setRectangle(2, 2, engine.width-3, engine.height-3, "floor")
      end
    end
  }),
  timer = {
    priority = true,
    time = 0,
    red = false,
    draw = function(self)
      term.setCursorPos(engine.width-10, 1)
      term.setBackgroundColor(colors.gray)
      if self.red then
        term.setTextColor(colors.red)
      else
        term.setTextColor(colors.yellow)
      end
      term.write("time: "..self.time)
    end,
    timedUpdate = function(self)
      self.red = not self.red
      if not gameEnded then
        self.time = self.time+0.1
      end
    end
  },
  hint = {
    draw = function()
      term.setBackgroundColor(colors.gray)
      term.setTextColor(colors.white)
      term.setCursorPos(2, engine.height)
      term.write("Press k to save, l to load and c to clear")
      term.setCursorPos(2, 1)
      term.write("WASD and arrow keys to move")
    end
  },
  endScreen = {
      update = function()
        if gameEnded then
          elements.player = nil
        end
      end,
      draw = function()
        if gameEnded then
          paintutils.drawFilledBox(8, 7, engine.width-7, engine.height-5, colors.lightBlue)
          term.setCursorPos(10, 10)
          term.setBackgroundColor(colors.lightBlue)
          term.setTextColor(colors.white)
          print("You won! Youre time was "..elements.timer.time)
          term.setCursorPos(8, 12)
          print("You can share your time on the forum!")
        end
      end
  }
}

engine.run(
  elements,
  0.1,
  function() if engine.keyboard.q then engine.quit() end end
)
